Index: src/java/transbit/tbits/events/test/AllRequestHandler.java
===================================================================
*** src/java/transbit/tbits/events/test/AllRequestHandler.java	(revision 0)
--- src/java/transbit/tbits/events/test/AllRequestHandler.java	(revision 0)
***************
*** 0 ****
--- 1,32 ----
+ /**
+  * 
+  */
+ package transbit.tbits.events.test;
+ 
+ import transbit.tbits.events.RequestEvent;
+ import transbit.tbits.events.RequestHandler;
+ 
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  *
+  */
+ public class AllRequestHandler implements RequestHandler<RequestEvent> {
+ 
+ 	/* (non-Javadoc)
+ 	 * @see com.tbitsglobal.event.EventHandler#getDescription()
+ 	 */
+ 	@Override
+ 	public String getDescription() {
+ 		// TODO Auto-generated method stub
+ 		return AllRequestHandler.class.getName();
+ 	}
+ 
+ 	/* (non-Javadoc)
+ 	 * @see com.tbitsglobal.event.EventHandler#handle(com.tbitsglobal.event.Event)
+ 	 */
+ 	@Override
+ 	public void handle(RequestEvent event) {
+ //		System.out.println("inside RequestHandler: " + event.getRequest());
+ 	}
+ 
+ }
Index: src/java/transbit/tbits/events/test/Subscriber.java
===================================================================
*** src/java/transbit/tbits/events/test/Subscriber.java	(revision 0)
--- src/java/transbit/tbits/events/test/Subscriber.java	(revision 0)
***************
*** 0 ****
--- 1,62 ----
+ /**
+  * 
+  */
+ package transbit.tbits.events.test;
+ 
+ import transbit.tbits.events.EventException;
+ import transbit.tbits.events.EventHandler;
+ import transbit.tbits.events.EventManager;
+ import transbit.tbits.events.PostRequestCommitEvent;
+ import transbit.tbits.events.PostRequestCommitHandler;
+ import transbit.tbits.events.PreRequestCommitEvent;
+ import transbit.tbits.events.PreRequestCommitHandler;
+ import transbit.tbits.events.RequestEvent;
+ 
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  *
+  */
+ public class Subscriber 
+ {
+ 	public static void main(String argv[])
+ 	{
+ 		EventHandler<?> eh = new PreRequestCommitHandler() {
+ 			
+ 			@Override
+ 			public void handle(PreRequestCommitEvent event) {
+ 				// TODO Auto-generated method stub
+ 				
+ 			}
+ 			
+ 			@Override
+ 			public String getDescription() {
+ 				// TODO Auto-generated method stub
+ 				return null;
+ 			}
+ 		};
+ 		
+ 		EventHandler<?> eh1 = new PostRequestCommitHandler() {
+ 			
+ 			@Override
+ 			public void handle(PostRequestCommitEvent event) {
+ 				// TODO Auto-generated method stub
+ 				
+ 			}
+ 			
+ 			@Override
+ 			public String getDescription() {
+ 				// TODO Auto-generated method stub
+ 				return null;
+ 			}
+ 		};
+ 		
+ 		try {
+ 			EventManager.getInstance().registerHandler(PreCommitHandler.class,PreRequestCommitEvent.class);
+ 		} catch (EventException e) {
+ 			// TODO Auto-generated catch block
+ 			e.printStackTrace();
+ 		}
+ //		EventManager.getInstance().registerHandler(PostCommitHandler.class,PreRequestCommitEvent.class);
+ 		
+ 	}
+ }
Index: src/java/transbit/tbits/events/test/PostCommitHandler.java
===================================================================
*** src/java/transbit/tbits/events/test/PostCommitHandler.java	(revision 0)
--- src/java/transbit/tbits/events/test/PostCommitHandler.java	(revision 0)
***************
*** 0 ****
--- 1,33 ----
+ /**
+  * 
+  */
+ package transbit.tbits.events.test;
+ 
+ import transbit.tbits.events.PostRequestCommitEvent;
+ import transbit.tbits.events.PostRequestCommitHandler;
+ 
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  *
+  */
+ public class PostCommitHandler implements PostRequestCommitHandler{
+ 
+ 	/* (non-Javadoc)
+ 	 * @see com.tbitsglobal.event.EventHandler#getDescription()
+ 	 */
+ 	@Override
+ 	public String getDescription() {
+ 		// TODO Auto-generated method stub
+ 		return null;
+ 	}
+ 
+ 	/* (non-Javadoc)
+ 	 * @see com.tbitsglobal.event.EventHandler#handle(com.tbitsglobal.event.Event)
+ 	 */
+ 	@Override
+ 	public void handle(PostRequestCommitEvent event) {
+ 		// TODO Auto-generated method stub
+ 		
+ 	}
+ 
+ }
Index: src/java/transbit/tbits/events/test/Publisher.java
===================================================================
*** src/java/transbit/tbits/events/test/Publisher.java	(revision 0)
--- src/java/transbit/tbits/events/test/Publisher.java	(revision 0)
***************
*** 0 ****
--- 1,20 ----
+ /**
+  * 
+  */
+ package transbit.tbits.events.test;
+ 
+ import transbit.tbits.events.Event;
+ import transbit.tbits.events.PreRequestCommitEvent;
+ 
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  *
+  */
+ public class Publisher 
+ {
+ 	public static void main(String argv[])
+ 	{
+ 		Event event = new PreRequestCommitEvent() {
+ 		};
+ 	}
+ }
Index: src/java/transbit/tbits/events/test/PreCommitHandler.java
===================================================================
*** src/java/transbit/tbits/events/test/PreCommitHandler.java	(revision 0)
--- src/java/transbit/tbits/events/test/PreCommitHandler.java	(revision 0)
***************
*** 0 ****
--- 1,33 ----
+ /**
+  * 
+  */
+ package transbit.tbits.events.test;
+ 
+ import transbit.tbits.events.PreRequestCommitEvent;
+ import transbit.tbits.events.PreRequestCommitHandler;
+ 
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  *
+  */
+ public class PreCommitHandler implements PreRequestCommitHandler{
+ 
+ 	/* (non-Javadoc)
+ 	 * @see com.tbitsglobal.event.EventHandler#getDescription()
+ 	 */
+ 	@Override
+ 	public String getDescription() {
+ 		// TODO Auto-generated method stub
+ 		return null;
+ 	}
+ 
+ 	/* (non-Javadoc)
+ 	 * @see com.tbitsglobal.event.EventHandler#handle(com.tbitsglobal.event.Event)
+ 	 */
+ 	@Override
+ 	public void handle(PreRequestCommitEvent event) {
+ 		// TODO Auto-generated method stub
+ 		
+ 	}
+ 
+ }
Index: src/java/transbit/tbits/events/EventHandler.java
===================================================================
*** src/java/transbit/tbits/events/EventHandler.java	(revision 0)
--- src/java/transbit/tbits/events/EventHandler.java	(revision 0)
***************
*** 0 ****
--- 1,25 ----
+ /**
+  * 
+  */
+ package transbit.tbits.events;
+ 
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  *
+  * All the EventHandlers should implement this interface
+  */
+ public interface EventHandler<T extends Event> 
+ {
+ 	/**
+ 	 * should return a human understandable description of the event handler
+ 	 * @return
+ 	 */
+ 	public String getDescription();
+ 	
+ 	/**
+ 	 * Implement how do you want to handle this event. This method will be called synchronously and in sequence
+ 	 * mentioned somewhere else. If your task is long and can be done asynchronously, think about using Threads.
+ 	 * @param event : the event that was fired.
+ 	 */
+ 	public void handle(T event) throws EventFailureException;
+ }
Index: src/java/transbit/tbits/events/EventException.java
===================================================================
*** src/java/transbit/tbits/events/EventException.java	(revision 0)
--- src/java/transbit/tbits/events/EventException.java	(revision 0)
***************
*** 0 ****
--- 1,49 ----
+ /**
+  * 
+  */
+ package transbit.tbits.events;
+ 
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  *
+  */
+ public class EventException extends Exception  {
+ 
+ 	/**
+ 	 * 
+ 	 */
+ 	private static final long serialVersionUID = 1L;
+ 
+ 	/**
+ 	 * 
+ 	 */
+ 	public EventException() {
+ 		super();
+ 		// TODO Auto-generated constructor stub
+ 	}
+ 
+ 	/**
+ 	 * @param message
+ 	 * @param cause
+ 	 */
+ 	public EventException(String message, Throwable cause) {
+ 		super(message, cause);
+ 		// TODO Auto-generated constructor stub
+ 	}
+ 
+ 	/**
+ 	 * @param message
+ 	 */
+ 	public EventException(String message) {
+ 		super(message);
+ 		// TODO Auto-generated constructor stub
+ 	}
+ 
+ 	/**
+ 	 * @param cause
+ 	 */
+ 	public EventException(Throwable cause) {
+ 		super(cause);
+ 		// TODO Auto-generated constructor stub
+ 	}
+ }
Index: src/java/transbit/tbits/events/Event.java
===================================================================
*** src/java/transbit/tbits/events/Event.java	(revision 0)
--- src/java/transbit/tbits/events/Event.java	(revision 0)
***************
*** 0 ****
--- 1,8 ----
+ package transbit.tbits.events;
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  * The parent interface which is implemented by all the events subclasses.
+  */
+ public interface Event
+ {
+ }
Index: src/java/transbit/tbits/events/EventRegistryManager.java
===================================================================
*** src/java/transbit/tbits/events/EventRegistryManager.java	(revision 0)
--- src/java/transbit/tbits/events/EventRegistryManager.java	(revision 0)
***************
*** 0 ****
--- 1,427 ----
+ /**
+  * 
+  */
+ package transbit.tbits.events;
+ 
+ import java.sql.Connection;
+ import java.sql.PreparedStatement;
+ import java.sql.ResultSet;
+ import java.sql.SQLException;
+ import java.util.ArrayList;
+ import java.util.List;
+ import java.util.logging.Level;
+ import java.util.logging.Logger;
+ 
+ 
+ import transbit.tbits.common.DataSourcePool;
+ import transbit.tbits.exception.PersistenceException;
+ 
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  *
+  */
+ public class EventRegistryManager 
+ {
+ 	Logger logger = Logger.getLogger("com.tbitsglobal.event");
+ 
+ 	private static EventRegistryManager instance = null;
+ 	private EventRegistryManager()
+ 	{
+ 	}
+ 	
+ 	public synchronized static EventRegistryManager getInstance()
+ 	{
+ 		if( null == instance )
+ 			instance = new EventRegistryManager();
+ 		
+ 		return instance;
+ 	}
+ 	
+ 	public static final String TableEventRegistry = "event_registry";
+ 	public static final String ColumnEventId = "event_id";
+ 	public static final String ColumnSourceId = "source_id";
+ 	public static final String ColumnEventClass = "event_class";
+ 	public static final String ColumnEventHandlerClass = "event_handler_class";
+ 	public static final String ColumnIsEnabled = "is_enabled";
+ 	public static final String ColumnEventOrder = "event_order";
+ 	public static final String ColumnDescription = "description";
+ 	
+ 	public static final String SELECT_ALL = "select * from " + TableEventRegistry + " order by " + ColumnEventOrder;
+ 	public static final String SELECT_BY_ID = "select * from " + TableEventRegistry + " where " + ColumnEventId + "=? order by " + ColumnEventOrder ;
+ 	public static final String SELECT_BY_SOURCEID = "select * from " + TableEventRegistry + " where " + ColumnSourceId + "=? order by " + ColumnEventOrder  ;
+ 	
+ 	public static final String INSERT = "insert into " + TableEventRegistry + " (" + ColumnSourceId + "," + ColumnEventClass + "," 
+ 											+ ColumnEventHandlerClass + "," +  ColumnIsEnabled + "," + ColumnEventOrder + "," + ColumnDescription  + ")" 
+ 											+ " values(?,?,?,?,?,?)" ;
+ 	
+ 	public static final String UPDATE = "update " + TableEventRegistry + " set " + ColumnSourceId + "=?, " + ColumnEventClass + "=? ," 
+ 			+ ColumnEventHandlerClass + "=?, " + ColumnIsEnabled + "=?, " + ColumnEventOrder + "=?, " + ColumnDescription + "=? "  
+ 			+ " where " + ColumnEventId + " =?" ;
+ 
+ 	public static final String DELETE = "delete from " + TableEventRegistry 
+ 										+ " where " + ColumnEventId + " =?" ;
+ 	
+ 	public EventRegistry createFromResultSet(ResultSet rs) throws SQLException
+ 	{
+ 		long eventId = rs.getLong(ColumnEventId);
+ 		String sourceId = rs.getString(ColumnSourceId);
+ 		String eventClass = rs.getString(ColumnEventClass);
+ 		String eventHandlerClass = rs.getString(ColumnEventHandlerClass);
+ 		boolean isEnabled = rs.getBoolean(ColumnIsEnabled);
+ 		int order = rs.getInt(ColumnEventOrder);
+ 		String description = rs.getString(ColumnDescription);
+ 		
+ 		return new EventRegistry(eventId, sourceId, eventClass, eventHandlerClass, isEnabled, order,description);
+ 	}
+ 	
+ 	public List<EventRegistry> lookupAllEventRegistry() throws PersistenceException
+ 	{
+ 		return getAllEventRegistry();
+ 	}
+ 	
+ 	public List<EventRegistry> getAllEventRegistry() throws PersistenceException
+ 	{
+ 		Connection con = null;
+ 		try
+ 		{
+ 			con = DataSourcePool.getConnection();
+ 			return getAllEventRegistry(con);
+ 		}
+ 		catch(Exception e)
+ 		{
+ 			logger.log(Level.WARNING, "Exception occured while getting all the event registries", e);
+ 			throw new PersistenceException("Exception occured while getting all the event registries", e);
+ 		}
+ 		finally
+ 		{
+ 			if( null != con )
+ 				try {
+ 					if( !con.isClosed() )
+ 						con.close();
+ 				} catch (SQLException e) {
+ 					// TODO Auto-generated catch block
+ 					e.printStackTrace();
+ 				}
+ 		}
+ 	}
+ 	
+ 	/**
+ 	 * @param con
+ 	 * @return
+ 	 * @throws SQLException 
+ 	 */
+ 	public List<EventRegistry> getAllEventRegistry(Connection con) throws SQLException 
+ 	{
+ 		List<EventRegistry> list = new ArrayList<EventRegistry>();
+ 		PreparedStatement ps = con.prepareCall(SELECT_ALL);
+ 		ResultSet rs = ps.executeQuery();
+ 		if( null != rs )
+ 			while( rs.next() )
+ 			{
+ 				EventRegistry er = createFromResultSet(rs);
+ 				list.add(er);
+ 			}
+ 		rs.close();
+ 		ps.close();
+ 		
+ 		return list;
+ 	}
+ 
+ 	public EventRegistry lookupEventRegistryById(long id) throws PersistenceException
+ 	{
+ 		return getEventRegistryById(id);
+ 	}
+ 	
+ 	public EventRegistry getEventRegistryById(long id) throws PersistenceException
+ 	{
+ 		Connection con = null;
+ 		try
+ 		{
+ 			con = DataSourcePool.getConnection();
+ 			return getEventRegistryById(id,con);
+ 		}
+ 		catch(Exception e)
+ 		{
+ 			logger.log(Level.WARNING, "Exception occured while getting the event registry with id : " + id, e);
+ 			throw new PersistenceException("Exception occured while getting the event registry with id : " + id, e);
+ 		}
+ 		finally
+ 		{
+ 			if( null != con )
+ 				try {
+ 					if( !con.isClosed() )
+ 						con.close();
+ 				} catch (SQLException e) {
+ 					// TODO Auto-generated catch block
+ 					e.printStackTrace();
+ 				}
+ 		}
+ 	}
+ 	
+ 	/**
+ 	 * @param id
+ 	 * @param con
+ 	 * @return
+ 	 * @throws SQLException 
+ 	 */
+ 	public EventRegistry getEventRegistryById(long id, Connection con) throws SQLException 
+ 	{
+ 		EventRegistry er = null;
+ 		PreparedStatement ps = con.prepareCall(SELECT_BY_ID);
+ 		ResultSet rs = ps.executeQuery();
+ 		if( null != rs )
+ 			if( rs.next() )
+ 			{
+ 				er = createFromResultSet(rs);
+ 			}
+ 		rs.close();
+ 		ps.close();
+ 		
+ 		return er;
+ 	}
+ 
+ 	public List<EventRegistry> lookupAllEventRegistryBySourceId(String sourceId) throws PersistenceException
+ 	{
+ 		return getAllEventRegistryBySourceId(sourceId);
+ 	}
+ 	
+ 	public List<EventRegistry> getAllEventRegistryBySourceId(String sourceId) throws PersistenceException
+ 	{
+ 		Connection con = null;
+ 		try
+ 		{
+ 			con = DataSourcePool.getConnection();
+ 			return getAllEventRegistryBySourceId(sourceId,con);
+ 		}
+ 		catch(Exception e)
+ 		{
+ 			logger.log(Level.WARNING, "Exception occured while getting all the event registries for sourceId " + sourceId, e);
+ 			throw new PersistenceException("Exception occured while getting all the event registries for sourceId " + sourceId, e);
+ 		}
+ 		finally
+ 		{
+ 			if( null != con )
+ 				try {
+ 					if( !con.isClosed() )
+ 						con.close();
+ 				} catch (SQLException e) {
+ 					// TODO Auto-generated catch block
+ 					e.printStackTrace();
+ 				}
+ 		}
+ 	}
+ 
+ 	/**
+ 	 * @param ar
+ 	 * @param con
+ 	 * @return
+ 	 * @throws SQLException 
+ 	 */
+ 	public List<EventRegistry> getAllEventRegistryBySourceId(String sourceId,
+ 			Connection con) throws SQLException {
+ 		List<EventRegistry> list = new ArrayList<EventRegistry>();
+ 		PreparedStatement ps = con.prepareCall(SELECT_BY_SOURCEID);
+ 		ps.setString(1, sourceId);
+ 		ResultSet rs = ps.executeQuery();
+ 		if( null != rs )
+ 			while( rs.next() )
+ 			{
+ 				EventRegistry er = createFromResultSet(rs);
+ 				list.add(er);
+ 			}
+ 		rs.close();
+ 		ps.close();
+ 		
+ 		return list;
+ 	}
+ 	
+ 	public EventRegistry persist(EventRegistry er) throws PersistenceException
+ 	{
+ 		if( null == er )
+ 			throw new PersistenceException("The provided EventRegistry was null.");
+ 		
+ 		if( er.getEventId() < 1 )
+ 			return insert(er);
+ 		else
+ 			return update(er);
+ 	}
+ 	
+ 	public EventRegistry persist(EventRegistry er, Connection con) throws PersistenceException, SQLException
+ 	{
+ 		if( null == er )
+ 			throw new PersistenceException("The provided EventRegistry was null.");
+ 		
+ 		if( er.getEventId() < 1 )
+ 			return insert(er,con);
+ 		else
+ 			return update(er,con);
+ 	}
+ 
+ 	/**
+ 	 * @param er
+ 	 * @param con
+ 	 * @return
+ 	 * @throws SQLException 
+ 	 * @throws PersistenceException 
+ 	 */
+ 	private EventRegistry insert(EventRegistry er, Connection con) throws SQLException, PersistenceException 
+ 	{
+ 		PreparedStatement ps = con.prepareStatement(INSERT);
+ 		ps.setString(1, er.getSourceId());
+ 		ps.setString(2, er.getEventClass());
+ 		ps.setString(3, er.getEventHandlerClass());
+ 		ps.setBoolean(4, er.isEnabled());
+ 		ps.setInt(5, er.getEventOrder());
+ 		ps.setString(6, er.getDescription());
+ 		
+ 		ResultSet generatedKeys = null;
+ 
+ 		// see : http://stackoverflow.com/questions/1915166/how-to-get-the-insert-id-in-jdbc
+ 		int affectedRows = ps.executeUpdate();
+         if (affectedRows == 0) {
+             throw new PersistenceException("Creating EventRegistry failed, no rows affected.");
+         }
+ 
+         generatedKeys = ps.getGeneratedKeys();
+         if (generatedKeys.next()) {
+             er.setEventId(generatedKeys.getLong(ColumnEventId));
+         } else {
+             throw new PersistenceException("Creating EventRegistry failed, no generated key obtained.");
+         }
+ 		
+ 		return er;
+ 		
+ 	}	
+ 
+ 	public EventRegistry insert(EventRegistry er) throws PersistenceException
+ 	{
+ 		Connection con = null;
+ 		try
+ 		{
+ 			con = DataSourcePool.getConnection();
+ 			return insert(er,con);
+ 		}
+ 		catch(Exception e)
+ 		{
+ 			logger.log(Level.WARNING, "Exception occured while inserting event registry : " + er, e);
+ 			throw new PersistenceException("Exception occured while inserting the event registry : " + er, e);
+ 		}
+ 		finally
+ 		{
+ 			if( null != con )
+ 				try {
+ 					if( !con.isClosed() )
+ 						con.close();
+ 				} catch (SQLException e) {
+ 					// TODO Auto-generated catch block
+ 					e.printStackTrace();
+ 				}
+ 		}
+ 	}
+ 
+ 	/**
+ 	 * @param er
+ 	 * @param con
+ 	 * @return
+ 	 */
+ 	public EventRegistry update(EventRegistry er) throws PersistenceException
+ 	{
+ 		Connection con = null;
+ 		try
+ 		{
+ 			con = DataSourcePool.getConnection();
+ 			return update(er,con);
+ 		}
+ 		catch(Exception e)
+ 		{
+ 			logger.log(Level.WARNING, "Exception occured while updating event registry : " + er, e);
+ 			throw new PersistenceException("Exception occured while update the event registry : " + er, e);
+ 		}
+ 		finally
+ 		{
+ 			if( null != con )
+ 				try {
+ 					if( !con.isClosed() )
+ 						con.close();
+ 				} catch (SQLException e) {
+ 					// TODO Auto-generated catch block
+ 					e.printStackTrace();
+ 				}
+ 		}
+ 	}
+ 
+ 	/**
+ 	 * @param er
+ 	 * @param con
+ 	 * @return
+ 	 * @throws SQLException 
+ 	 * @throws PersistenceException 
+ 	 */
+ 	private EventRegistry update(EventRegistry er, Connection con) throws SQLException, PersistenceException 
+ 	{
+ 		PreparedStatement ps = con.prepareStatement(UPDATE);
+ 		ps.setString(1, er.getSourceId());
+ 		ps.setString(2, er.getEventClass());
+ 		ps.setString(3, er.getEventHandlerClass());
+ 		ps.setBoolean(4, er.isEnabled());
+ 		ps.setInt(5, er.getEventOrder());
+ 		ps.setString(6,er.getDescription());
+ 		ps.setLong(7, er.getEventId());
+ 		
+ 		// see : http://stackoverflow.com/questions/1915166/how-to-get-the-insert-id-in-jdbc
+ 		int affectedRows = ps.executeUpdate();
+         if (affectedRows == 0) {
+             throw new PersistenceException("Creating EventRegistry failed, no rows affected.");
+         }
+ 
+ 		return er;
+ 	}
+ 	
+ 	public void delete(EventRegistry er) throws PersistenceException
+ 	{
+ 		Connection con = null;
+ 		try
+ 		{
+ 			con = DataSourcePool.getConnection();
+ 			delete(er,con);
+ 		}
+ 		catch(Exception e)
+ 		{
+ 			logger.log(Level.WARNING, "Exception occured while deleting event registry : " + er, e);
+ 			throw new PersistenceException("Exception occured while deleting the event registry : " + er, e);
+ 		}
+ 		finally
+ 		{
+ 			if( null != con )
+ 				try {
+ 					if( !con.isClosed() )
+ 						con.close();
+ 				} catch (SQLException e) {
+ 					// TODO Auto-generated catch block
+ 					e.printStackTrace();
+ 				}
+ 		}
+ 	}
+ 
+ 	/**
+ 	 * @param er
+ 	 * @param con
+ 	 * @return
+ 	 * @throws PersistenceException 
+ 	 * @throws SQLException 
+ 	 */
+ 	public void delete(EventRegistry er, Connection con) throws PersistenceException, SQLException 
+ 	{
+ 		PreparedStatement ps = con.prepareStatement(DELETE);
+ 		ps.setLong(1, er.getEventId());
+ 		
+ 		// see : http://stackoverflow.com/questions/1915166/how-to-get-the-insert-id-in-jdbc
+ 		int affectedRows = ps.executeUpdate();
+         if (affectedRows == 0) {
+             throw new PersistenceException("Deleting EventRegistry failed, no rows affected.");
+         }
+         
+         ps.close();
+ 	}
+ 	
+ }
Index: src/java/transbit/tbits/events/PostRequestCommitHandler.java
===================================================================
*** src/java/transbit/tbits/events/PostRequestCommitHandler.java	(revision 0)
--- src/java/transbit/tbits/events/PostRequestCommitHandler.java	(revision 0)
***************
*** 0 ****
--- 1,12 ----
+ /**
+  * 
+  */
+ package transbit.tbits.events;
+ 
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  *
+  */
+ public interface PostRequestCommitHandler extends RequestHandler<PostRequestCommitEvent>{
+ 
+ }
Index: src/java/transbit/tbits/events/RequestHandler.java
===================================================================
*** src/java/transbit/tbits/events/RequestHandler.java	(revision 0)
--- src/java/transbit/tbits/events/RequestHandler.java	(revision 0)
***************
*** 0 ****
--- 1,13 ----
+ /**
+  * 
+  */
+ package transbit.tbits.events;
+ 
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  *
+  */
+ public interface RequestHandler<T extends RequestEvent> extends EventHandler<T> 
+ {
+ 	
+ }
Index: src/java/transbit/tbits/events/PreRequestCommitHandler.java
===================================================================
*** src/java/transbit/tbits/events/PreRequestCommitHandler.java	(revision 0)
--- src/java/transbit/tbits/events/PreRequestCommitHandler.java	(revision 0)
***************
*** 0 ****
--- 1,13 ----
+ /**
+  * 
+  */
+ package transbit.tbits.events;
+ 
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  *
+  */
+ public interface PreRequestCommitHandler extends RequestHandler<PreRequestCommitEvent>
+ {
+ 
+ }
Index: src/java/transbit/tbits/events/EventFailureException.java
===================================================================
*** src/java/transbit/tbits/events/EventFailureException.java	(revision 0)
--- src/java/transbit/tbits/events/EventFailureException.java	(revision 0)
***************
*** 0 ****
--- 1,52 ----
+ /**
+  * 
+  */
+ package transbit.tbits.events;
+ 
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  * If any event throws this exception then the event execution will stop just after
+  * this and the exception will be propogated.
+  * Any exception other than this will be catched and ignored. So if some author wants
+  * the execution of current thread of tbits to stop then he MUST throw this exception.
+  */
+ public class EventFailureException extends Exception {
+ 
+ 	/**
+ 	 * 
+ 	 */
+ 	private static final long serialVersionUID = 1L;
+ 
+ 	/**
+ 	 * 
+ 	 */
+ 	public EventFailureException() {
+ 		super();
+ 		// TODO Auto-generated constructor stub
+ 	}
+ 
+ 	/**
+ 	 * @param message
+ 	 * @param cause
+ 	 */
+ 	public EventFailureException(String message, Throwable cause) {
+ 		super(message, cause);
+ 		// TODO Auto-generated constructor stub
+ 	}
+ 
+ 	/**
+ 	 * @param message
+ 	 */
+ 	public EventFailureException(String message) {
+ 		super(message);
+ 		// TODO Auto-generated constructor stub
+ 	}
+ 
+ 	/**
+ 	 * @param cause
+ 	 */
+ 	public EventFailureException(Throwable cause) {
+ 		super(cause);
+ 		// TODO Auto-generated constructor stub
+ 	}
+ }
Index: src/java/transbit/tbits/events/PostRequestCommitEvent.java
===================================================================
*** src/java/transbit/tbits/events/PostRequestCommitEvent.java	(revision 0)
--- src/java/transbit/tbits/events/PostRequestCommitEvent.java	(revision 0)
***************
*** 0 ****
--- 1,12 ----
+ /**
+  * 
+  */
+ package transbit.tbits.events;
+ 
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  *
+  */
+ public interface PostRequestCommitEvent extends RequestEvent{
+ 
+ }
Index: src/java/transbit/tbits/events/EventRegistry.java
===================================================================
*** src/java/transbit/tbits/events/EventRegistry.java	(revision 0)
--- src/java/transbit/tbits/events/EventRegistry.java	(revision 0)
***************
*** 0 ****
--- 1,169 ----
+ /**
+  * 
+  */
+ package transbit.tbits.events;
+ 
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  * 
+  */
+ public class EventRegistry 
+ {
+ 	private String sourceId;
+ 	private String eventClass;
+ 	private String eventHandlerClass;
+ 	private long eventId;
+ 	private int eventOrder;
+ 	private boolean isEnabled;
+ 	private String description;
+ 	/**
+ 	 * @return the description
+ 	 */
+ 	public String getDescription() {
+ 		return description;
+ 	}
+ 	/**
+ 	 * @param description the description to set
+ 	 */
+ 	public void setDescription(String description) {
+ 		this.description = description;
+ 	}
+ 	/**
+ 	 * @param eventId
+ 	 * @param sourceId : can be null if the event-handler is not associated with any addon. eg. event-handler is inside tbits core module or other plugin which does not follow the specification of addon mechanism
+ 	 * @param eventClass
+ 	 * @param eventHandlerClass
+ 	 * @param isEnabled
+ 	 * @param eventOrder
+ 	 */
+ 	public EventRegistry(long eventId, String sourceId, String eventClass,
+ 			String eventHandlerClass, boolean isEnabled, int eventOrder, String description) {
+ 		super();
+ 		this.eventId = eventId;
+ 		this.sourceId = sourceId;
+ 		this.eventClass = eventClass;
+ 		this.eventHandlerClass = eventHandlerClass;
+ 		this.isEnabled = isEnabled;
+ 		this.eventOrder = eventOrder;
+ 		this.description = description;
+ 	}
+ 	@Override
+ 	public boolean equals(Object obj) {
+ 		if (this == obj) {
+ 			return true;
+ 		}
+ 		if (obj == null) {
+ 			return false;
+ 		}
+ 		if (!(obj instanceof EventRegistry)) {
+ 			return false;
+ 		}
+ 		EventRegistry other = (EventRegistry) obj;
+ 		if (eventId != other.eventId) {
+ 			return false;
+ 		}
+ 		return true;
+ 	}
+ 	
+ 	/**
+ 	 * @return the addonId
+ 	 */
+ 	public String getSourceId() {
+ 		return sourceId;
+ 	}
+ 	/**
+ 	 * @return the eventClass
+ 	 */
+ 	public String getEventClass() {
+ 		return eventClass;
+ 	}
+ 	/**
+ 	 * @return the eventHandlerClass
+ 	 */
+ 	public String getEventHandlerClass() {
+ 		return eventHandlerClass;
+ 	}
+ 	/**
+ 	 * @return the eventId
+ 	 */
+ 	public long getEventId() {
+ 		return eventId;
+ 	}
+ 	/**
+ 	 * @return the eventOrder
+ 	 */
+ 	public int getEventOrder() {
+ 		return eventOrder;
+ 	}
+ 	
+ 	
+ 	@Override
+ 	public int hashCode() {
+ 		final int prime = 31;
+ 		int result = 1;
+ 		result = prime * result + (int) (eventId ^ (eventId >>> 32));
+ 		return result;
+ 	}
+ 	
+ 	/**
+ 	 * @return the isEnabled
+ 	 */
+ 	public boolean isEnabled() {
+ 		return isEnabled;
+ 	}
+ 	
+ 	/**
+ 	 * @param sourceId the addonId to set
+ 	 */
+ 	public void setSourceId(String sourceId) {
+ 		this.sourceId = sourceId;
+ 	}
+ 
+ 
+ 	/**
+ 	 * @param isEnabled the isEnabled to set
+ 	 */
+ 	public void setEnabled(boolean isEnabled) {
+ 		this.isEnabled = isEnabled;
+ 	}
+ 
+ 	/**
+ 	 * @param eventClass the eventClass to set
+ 	 */
+ 	public void setEventClass(String eventClass) {
+ 		this.eventClass = eventClass;
+ 	}
+ 
+ 	/**
+ 	 * @param eventHandlerClass the eventHandlerClass to set
+ 	 */
+ 	public void setEventHandlerClass(String eventHandlerClass) {
+ 		this.eventHandlerClass = eventHandlerClass;
+ 	}
+ 	
+ 	/**
+ 	 * @param eventId the eventId to set
+ 	 */
+ 	public void setEventId(long eventId) {
+ 		this.eventId = eventId;
+ 	}
+ 	/**
+ 	 * @param eventOrder the eventOrder to set
+ 	 */
+ 	public void setEventOrder(int eventOrder) {
+ 		this.eventOrder = eventOrder;
+ 	}
+ 	/* (non-Javadoc)
+ 	 * @see java.lang.Object#toString()
+ 	 */
+ 	@Override
+ 	public String toString() {
+ 		return "EventRegistry [sourceId=" + sourceId + ", eventClass="
+ 				+ eventClass + ", eventHandlerClass=" + eventHandlerClass
+ 				+ ", eventId=" + eventId + ", eventOrder=" + eventOrder
+ 				+ ", isEnabled=" + isEnabled
+ 				+ ", description=" + description + "]";
+ 	}
+ 	
+ 	
+ }
Index: src/java/transbit/tbits/events/PreRequestCommitEvent.java
===================================================================
*** src/java/transbit/tbits/events/PreRequestCommitEvent.java	(revision 0)
--- src/java/transbit/tbits/events/PreRequestCommitEvent.java	(revision 0)
***************
*** 0 ****
--- 1,12 ----
+ /**
+  * 
+  */
+ package transbit.tbits.events;
+ 
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  *
+  */
+ public interface PreRequestCommitEvent extends RequestEvent{
+ 
+ }
Index: src/java/transbit/tbits/events/RequestEvent.java
===================================================================
*** src/java/transbit/tbits/events/RequestEvent.java	(revision 0)
--- src/java/transbit/tbits/events/RequestEvent.java	(revision 0)
***************
*** 0 ****
--- 1,13 ----
+ /**
+  * 
+  */
+ package transbit.tbits.events;
+ 
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  *
+  */
+ public interface RequestEvent extends Event 
+ {
+ 	
+ }
Index: src/java/transbit/tbits/events/EventManager.java
===================================================================
*** src/java/transbit/tbits/events/EventManager.java	(revision 0)
--- src/java/transbit/tbits/events/EventManager.java	(revision 0)
***************
*** 0 ****
--- 1,130 ----
+ /**
+  * This class is the singleton Manager for all TBits core events handling.
+  */
+ package transbit.tbits.events;
+ 
+ import java.util.ArrayList;
+ import java.util.Collection;
+ import java.util.HashSet;
+ import java.util.Hashtable;
+ import java.util.List;
+ import java.util.logging.Level;
+ import java.util.logging.Logger;
+ 
+ /**
+  * @author Nitiraj Singh Rathore ( nitiraj.r@tbitsglobal.com )
+  * Handler should be able to register for an Event at any depth of the event Heirarchy and should get the notifications for the complete sub tree.
+  * Handlers should be make enable disabled from the UI and saved in DB so that next time the system starts it loads the Handlers accordingly
+  */
+ 
+ 
+ public class EventManager 
+ {
+ 	public static final Logger LOG = Logger.getLogger("com.tbitsglobal.event");
+ 	private static EventManager instance = null;
+ 	private Hashtable<Class<? extends Event>, List<Class<? extends EventHandler<? extends Event>>>> handlerRegistry = new Hashtable<Class<? extends Event>, List<Class<? extends EventHandler<? extends Event>>>>();
+ 	private EventManager()
+ 	{
+ 		// nothing to be done
+ 	}
+ 	
+ 	public synchronized static EventManager getInstance()
+ 	{
+ 		if( null == instance )
+ 			instance = new EventManager();
+ 		
+ 		return instance;
+ 	}
+ 	
+ 	/**
+ 	 * this method will invoke the relevant method of all the EventHandler's that is registered directly
+ 	 * for this event' class or any of the super class of this event. Thus registering for an event also
+ 	 * automatically registers for all its sub-classes. This increases and decreases complexity at the same time
+ 	 * go through : http://www.marco.panizza.name/dispenseTM/slides/exerc/eventNotifier/eventNotifier.html 
+ 	 * @param event
+ 	 * @throws EventFailureException 
+ 	 */
+ 	public <T extends Event> void fireEvent(T event) throws EventFailureException
+ 	{
+ 		Class<?> eventClass = event.getClass();
+ 		
+ 		// find all the event classes that are class / super-class of this event
+ 		// so that we can run all those handler that subscribe directly or indirectly to this event
+ 		// get all the handlers. Rest of the complexity is already handled using generics
+ 		Collection<Class<? extends EventHandler<? extends Event>>> handlers = new HashSet<Class<? extends EventHandler<? extends Event>>>();
+ 		for( Class<? extends Event> ec : handlerRegistry.keySet() )
+ 		{
+ 			if( ec.isAssignableFrom(eventClass) )
+ 			{
+ 				List<Class<? extends EventHandler<? extends Event>>> h = handlerRegistry.get(ec);
+ 				handlers.addAll(h);
+ 			}
+ 		}
+ 		
+ 		for( Class<? extends EventHandler<? extends Event>> klass : handlers )
+ 		{
+ 			// TODO : should we avoid this new object creation and create the object at the time of registry
+ 			try 
+ 			{
+ 				EventHandler<T> object = (EventHandler<T>) klass.newInstance();
+ 				LOG.info("Executing handler : " + klass + ", for event : " + event ) ;
+ 				object.handle(event);
+ 				LOG.info("Successfully Executed handler : " + klass + " , for event : " + event ) ;
+ 			}
+ 			catch(EventFailureException e)
+ 			{
+ 				LOG.log(Level.SEVERE, "Error occurred in creating/executing handler " + klass + " , for event : " + event + ". This exception will be thrown.");
+ 				throw e;
+ 			}
+ 			catch (Exception e) {
+ 				LOG.log(Level.SEVERE, "Error occurred in creating/executing handler " + klass + " , for event : " + event + ". This EventHandler is aborted. Changes made by it although might persist");
+ 			}
+ 		}
+ 	}
+ 	
+ 	public synchronized <T extends Event, P extends EventHandler<T>> void registerHandler( Class<P> handler, Class<T> eventClass ) throws EventException
+ 	{
+ 		if( null == handler )
+ 		{
+ 			LOG.log(Level.WARNING,"The handler provided was null");
+ 			throw new EventException("The handler provided was null");
+ 		}
+ 		List<Class<? extends EventHandler<? extends Event>>> currentHandlers = handlerRegistry.get(eventClass);
+ 		if(null == currentHandlers)
+ 			currentHandlers = new ArrayList<Class<? extends EventHandler<? extends Event>>>();
+ 		
+ 		// check if already registered
+ 		if(currentHandlers.contains(handler))
+ 		{
+ 			LOG.log(Level.WARNING, "The given handler was already registered for the given event. This request will be ignored. Handler = " + handler + " , event = "  + eventClass);
+ 			return ;
+ 		}
+ 		currentHandlers.add(handler);
+ 		
+ 		handlerRegistry.put(eventClass, currentHandlers);
+ 		LOG.info("Successfully Registered : " + handler + " for event " + eventClass);
+ 	}
+ 	
+ 	public synchronized <T extends Event, P extends EventHandler<T>> void unRegisterHandler( Class<P> handler, Class<T> eventClass ) throws EventException
+ 	{
+ 		if( null == handler )
+ 		{
+ 			LOG.log(Level.WARNING,"The handler provided was null");
+ 			throw new EventException("The handler provided was null");
+ 		}
+ 		List<Class<? extends EventHandler<? extends Event>>> currentHandlers = handlerRegistry.get(eventClass);
+ 		if(null == currentHandlers)
+ 			currentHandlers = new ArrayList<Class<? extends EventHandler<? extends Event>>>();
+ 		
+ 		if( currentHandlers.remove(handler) == false )
+ 		{
+ 			LOG.log(Level.WARNING, "The given handler was not registered for the given event. This request will be ignored. handler : "+ handler + ", event : " + eventClass);
+ 			return;
+ 		}
+ 		
+ 		handlerRegistry.put(eventClass, currentHandlers);
+ 		LOG.info("Successfully unRegistered : " + handler + " for event " + eventClass);
+ 	}
+ 	
+ 	
+ }
Index: src/java/transbit/tbits/api/APIUtil.java
===================================================================
*** src/java/transbit/tbits/api/APIUtil.java	(revision 7192)
--- src/java/transbit/tbits/api/APIUtil.java	(working copy)
***************
*** 143,148 ****
--- 143,164 ----
      	
      	return Configuration.findAbsolutePath(tmpDir);
      }
+     
+     /**
+      * This creates a the temp directory if not already present and returns that File object.
+      * @return
+      */
+     public static File getTBitsTMPDir()
+     {
+     	String tmpDir = PropertiesHandler.getProperty(TBitsPropEnum.KEY_TMPDIR);
+     	if( null == tmpDir )
+     		return null;
+     	File file = new File(Configuration.findAbsolutePath(tmpDir));
+     	if( !file.exists() )
+     		file.mkdirs();
+     	return file;
+     }
+     
  //    static {
  //        try {
  //            ourTmpLocation = 
Index: build.properties
===================================================================
*** build.properties	(revision 7192)
--- build.properties	(working copy)
***************
*** 1,7 ****
! build.transbit.database.server=snowwhite
! build.transbit.database.name=lnt
  build.transbit.database.login=sa
! build.transbit.database.password=abc123
  port=8080
  build.transbit.tbits.port=${port}
  build.transbit.tbits.jvueservlet.port=5098
--- 1,7 ----
! build.transbit.database.server=lion.mytbits.com
! build.transbit.database.name=falcon
  build.transbit.database.login=sa
! build.transbit.database.password=tbits@1234
  port=8080
  build.transbit.tbits.port=${port}
  build.transbit.tbits.jvueservlet.port=5098
***************
*** 26,32 ****
  build.transbit.tbits.isautovueenabled = true  
  build.transbit.tbits.jvueserver=http://${HOST_NAME}:${build.transbit.tbits.jvueservlet.port}/servlet/VueServlet
  build.transbit.tbits.jvuecodebase=http://${HOST_NAME}/jVue
! INSTALL_PATH=/Users/sandeepgiri/projects/tbitsroot/tbits/dist
  #build.jcifs.http.domainController=${env.COMPUTERNAME}
  build.jcifs.http.domainController=transbit2000
  
--- 26,32 ----
  build.transbit.tbits.isautovueenabled = true  
  build.transbit.tbits.jvueserver=http://${HOST_NAME}:${build.transbit.tbits.jvueservlet.port}/servlet/VueServlet
  build.transbit.tbits.jvuecodebase=http://${HOST_NAME}/jVue
! INSTALL_PATH=/home/nitiraj/work/tbitsroot/tbits/dist
  #build.jcifs.http.domainController=${env.COMPUTERNAME}
  build.jcifs.http.domainController=transbit2000
  
Index: jaguar/.classpath
===================================================================
*** jaguar/.classpath	(revision 7192)
--- jaguar/.classpath	(working copy)
***************
*** 1,149 ****
  <?xml version="1.0" encoding="UTF-8"?>
  <classpath>
  	<classpathentry kind="src" path="src/java"/>
! 	<classpathentry kind="src" path="common"/>
  	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
! 	<classpathentry combineaccessrules="false" kind="src" path="/trunk-tbits"/>
  	<classpathentry kind="con" path="com.google.gwt.eclipse.core.GWT_CONTAINER"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/.sigar_shellrc"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/activation-1.0.2.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/ant-1.6.2.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/ant-launcher-1.6.2.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/auth-dummy.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/batik-awt-util-1.6.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/batik-dom-1.6.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/batik-svggen-1.6.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/batik-util-1.6.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/batik-xml-1.6.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/bcmail-jdk15-134.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/bcpg-jdk15-134.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/bcprov-jdk15-134.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/bctsp-jdk15-134.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/catalina-ant.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/catalina.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/cewolf-1.0.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/chartengineapi.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/chartexamplescoreapi.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/chartitemapi.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/checkstyle-all-4.2.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/classes12.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/com.ibm.icu_4.2.1.v20100412.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/commons-beanutils.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/commons-cli-1.0.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/commons-codec-1.3.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/commons-collections-3.2.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/commons-dbcp-1.3.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/commons-digester.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/commons-fileupload-1.2.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/commons-httpclient-3.0.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/commons-io-1.4.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/commons-lang-2.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/commons-logging-1.0.3.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/commons-logging.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/commons-pool-1.5.4.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/core-renderer-minimal.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/core-renderer.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/coreapi.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/cos.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/crosstabcoreapi.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/dataadapterapi.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/dataaggregationapi.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/dataextraction.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/displaytag-1.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/displaytag-export-poi-1.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/displaytag-portlet-1.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/dom4j-1.6.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/dteapi.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/ehcache-core-2.3.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/ehcache-terracotta-2.3.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/emitterconfig.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/engineapi.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/ezmorph-1.0.4.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/flute.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/FontBox-0.1.0.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/geronimo-jpa_3.0_spec-1.1.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/geronimo-jta_1.1_spec-1.1.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/geronimo-stax-api_1.0_spec-1.0.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/gson-1.3.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/gwt-api-checker.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/gwt-ckeditor-0.5.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/gwt-dev.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/gwt-gears.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/gwt-servlet-deps.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/gwt-servlet.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/gwt-soyc-vis.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/gwt-user.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/gxt-sa.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/hotswap.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/htmlcleaner2_1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/htmlparser.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/iText-2.0.8.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/jai_codec.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/jai_core.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/jakarta-oro-2.0.8.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/jakarta-regexp-1.2.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/jazzy-core-compiled-w-j2se1.4.2_05.jar" sourcepath="/Users/sandeepgiri/Downloads/jazzy-src.zip"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/jcifs-1.3.14.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/jcommon-1.0.0.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/jdo2-api-2.3-ea.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/jdom.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/jfreechart-1.0.0.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/jmimemagic-0.0.4a.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/jmxtools.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/js.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/json-lib-2.2.1-jdk15.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/jta-1.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/jtds-1.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/junit-4.3.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/libsigar-ia64-hpux-11.sl"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/libsigar-pa-hpux-11.sl"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/libsigar-universal-macosx.dylib"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/libsigar-universal64-macosx.dylib"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/log4j-1.2.16.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/lucene-1.4.3.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/mail-1.3.2.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/minium.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/modelapi.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/modelodaapi.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/odadesignapi.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/opencsv-1.8.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/org.apache.commons.codec_1.3.0.v20100518-1140.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/org.eclipse.emf.common_2.6.0.v20100914-1218.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/org.eclipse.emf.ecore_2.5.0.v200906151043.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/org.eclipse.emf.ecore_2.6.1.v20100914-1218.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/org.eclipse.emf.ecore.xmi_2.5.0.v200906151043.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/org.eclipse.emf.ecore.xmi_2.5.0.v20100521-1846.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/org.w3c.css.sac_1.3.0.v200805290154.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/PDFBox-0.7.3.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/poi-3.6-20091214.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/poi-contrib-3.6-20091214.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/poi-ooxml-3.6-20091214.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/poi-ooxml-schemas-3.6-20091214.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/poi-scratchpad-3.6-20091214.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/primrose-2.7.0.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/proxool-0.9.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/proxool-cglib.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/quartz-all-1.8.3.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/RadixTree.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/scriptapi.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/servlet-api.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/servlets-default.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/servlets-webdav.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/sigar-amd64-winnt.dll"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/sigar-x86-winnt.dll"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/sigar-x86-winnt.lib"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/sigar.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/slf4j-api-1.5.11.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/slf4j-log4j12-1.5.11.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/tesjeract.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/tm-extractors-0.4.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/tools.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/tvncore-0.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/woxSerializer.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/xercesImpl-2.6.2.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/xml-apis-xerces-2.9.1.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/xmlbeans-2.3.0.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/yui-compressor-ant-task-0.3.jar"/>
- 	<classpathentry kind="lib" path="/trunk-tbits/lib/yuicompressor-2.3.4.jar"/>
  	<classpathentry kind="output" path="war/WEB-INF/classes"/>
  </classpath>
--- 1,142 ----
  <?xml version="1.0" encoding="UTF-8"?>
  <classpath>
  	<classpathentry kind="src" path="src/java"/>
! 	<classpathentry excluding="browse/|browse/com/|browse/com/tbitsglobal/|browse/com/tbitsglobal/browse/|browse/com/tbitsglobal/browse/_db/|browse/com/tbitsglobal/browse/client/|browse/com/tbitsglobal/browse/server/|dcn/|dcn/com/|dcn/com/tbitsGlobal/|dcn/com/tbitsGlobal/_db/|dcn/com/tbitsGlobal/client/|dcn/com/tbitsGlobal/client/plugins/|dcn/com/tbitsGlobal/client/plugins/form/|dcn/com/tbitsGlobal/client/service/|dcn/com/tbitsGlobal/client/utils/|dcn/com/tbitsGlobal/server/|dcn/com/tbitsGlobal/server/utils/|dcn/com/tbitsGlobal/shared/|invitationLetterWizard/|invitationLetterWizard/com/|invitationLetterWizard/com/tbitsGlobal/|invitationLetterWizard/com/tbitsGlobal/_db/|invitationLetterWizard/com/tbitsGlobal/client/|invitationLetterWizard/com/tbitsGlobal/server/|mom/|mom/com/|mom/com/tbitsGlobal/|mom/com/tbitsGlobal/client/|mom/com/tbitsGlobal/client/admin/|mom/com/tbitsGlobal/client/admin/models/|mom/com/tbitsGlobal/client/Events/|mom/com/tbitsGlobal/client/Extensions/|mom/com/tbitsGlobal/client/service/|mom/com/tbitsGlobal/server/|pdf/|pdf/com/|pdf/com/tbitsGlobal/|pdf/com/tbitsGlobal/_db/|pdf/com/tbitsGlobal/client/|pdf/com/tbitsGlobal/server/|pdf/com/tbitsGlobal/shared/|transmittal/|transmittal/com/|transmittal/com/tbitsGlobal/|transmittal/com/tbitsGlobal/_db/|transmittal/com/tbitsGlobal/client/|transmittal/com/tbitsGlobal/client/admin/|transmittal/com/tbitsGlobal/client/admin/pages/|transmittal/com/tbitsGlobal/client/admin/wizard/|transmittal/com/tbitsGlobal/client/extensions/|transmittal/com/tbitsGlobal/client/models/|transmittal/com/tbitsGlobal/server/|transmittal/com/tbitsGlobal/server/admin/|transmittal/com/tbitsGlobal/server/cache/|transmittal/com/tbitsGlobal/server/cacheObjects/" kind="src" path="common"/>
  	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
! 	<classpathentry combineaccessrules="false" kind="src" path="/tbits"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/activation-1.0.2.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/ant-1.6.2.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/ant-launcher-1.6.2.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/antlr-3.3-complete.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/auth-dummy.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/batik-awt-util-1.6.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/batik-dom-1.6.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/batik-svggen-1.6.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/batik-util-1.6.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/batik-xml-1.6.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/bcmail-jdk15-134.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/bcpg-jdk15-134.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/bcprov-jdk15-134.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/bctsp-jdk15-134.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/catalina-ant.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/catalina.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/cewolf-1.0.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/chartengineapi.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/chartexamplescoreapi.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/chartitemapi.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/checkstyle-all-4.2.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/classes12.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/com.ibm.icu_4.2.1.v20100412.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/commons-beanutils.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/commons-cli-1.0.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/commons-codec-1.3.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/commons-collections-3.2.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/commons-dbcp-1.3.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/commons-digester.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/commons-fileupload-1.2.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/commons-httpclient-3.0.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/commons-io-1.4.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/commons-lang-2.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/commons-logging-1.0.3.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/commons-logging.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/commons-pool-1.5.4.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/core-renderer-minimal.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/core-renderer.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/coreapi.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/cos.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/crosstabcoreapi.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/dataadapterapi.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/dataaggregationapi.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/dataextraction.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/displaytag-1.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/displaytag-export-poi-1.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/displaytag-portlet-1.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/dom4j-1.6.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/dteapi.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/ehcache-core-2.3.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/ehcache-terracotta-2.3.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/emitterconfig.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/engineapi.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/ezmorph-1.0.4.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/flute.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/FontBox-0.1.0.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/geronimo-jpa_3.0_spec-1.1.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/geronimo-jta_1.1_spec-1.1.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/geronimo-stax-api_1.0_spec-1.0.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/gson-1.3.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/gwt-api-checker.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/gwt-ckeditor-0.5.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/gwt-gears.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/gwt-servlet-deps.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/gwt-servlet.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/gwt-soyc-vis.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/gxt-sa.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/hotswap.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/htmlcleaner2_1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/htmlparser.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/iText-2.0.8.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/jai_codec.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/jai_core.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/jakarta-oro-2.0.8.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/jakarta-regexp-1.2.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/jazzy-core-compiled-w-j2se1.4.2_05.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/jcifs-1.3.14.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/jcommon-1.0.0.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/jdo2-api-2.3-ea.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/jdom.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/jfreechart-1.0.0.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/jmimemagic-0.0.4a.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/jmxtools.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/js.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/json-lib-2.2.1-jdk15.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/jta-1.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/jtds-1.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/junit-4.3.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/log4j-1.2.16.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/lucene-1.4.3.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/mail-1.3.2.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/minium.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/modelapi.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/modelodaapi.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/odadesignapi.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/opencsv-1.8.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/org.apache.commons.codec_1.3.0.v20100518-1140.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/org.eclipse.emf.common_2.6.0.v20100914-1218.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/org.eclipse.emf.ecore_2.5.0.v200906151043.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/org.eclipse.emf.ecore_2.6.1.v20100914-1218.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/org.eclipse.emf.ecore.xmi_2.5.0.v200906151043.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/org.eclipse.emf.ecore.xmi_2.5.0.v20100521-1846.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/org.w3c.css.sac_1.3.0.v200805290154.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/PDFBox-0.7.3.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/poi-3.6-20091214.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/poi-contrib-3.6-20091214.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/poi-ooxml-3.6-20091214.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/poi-ooxml-schemas-3.6-20091214.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/poi-scratchpad-3.6-20091214.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/primrose-2.7.0.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/proxool-0.9.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/proxool-cglib.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/quartz-all-1.8.3.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/RadixTree.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/scriptapi.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/servlet-api.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/servlets-default.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/servlets-webdav.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/sigar.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/slf4j-api-1.5.11.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/slf4j-log4j12-1.5.11.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/tesjeract.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/tm-extractors-0.4.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/tools.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/tvncore-0.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/vuelinkcore.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/vueservlet.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/woxSerializer.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/xercesImpl-2.6.2.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/xml-apis-xerces-2.9.1.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/xmlbeans-2.3.0.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/yui-compressor-ant-task-0.3.jar"/>
! 	<classpathentry kind="lib" path="/tbits/src/lib/yuicompressor-2.3.4.jar"/>
  	<classpathentry kind="con" path="com.google.gwt.eclipse.core.GWT_CONTAINER"/>
  	<classpathentry kind="output" path="war/WEB-INF/classes"/>
  </classpath>
Index: jaguar/.project
===================================================================
*** jaguar/.project	(revision 7192)
--- jaguar/.project	(working copy)
***************
*** 1,6 ****
  <?xml version="1.0" encoding="UTF-8"?>
  <projectDescription>
! 	<name>trunk-jaguar</name>
  	<comment></comment>
  	<projects>
  	</projects>
--- 1,6 ----
  <?xml version="1.0" encoding="UTF-8"?>
  <projectDescription>
! 	<name>jaguar</name>
  	<comment></comment>
  	<projects>
  	</projects>
***************
*** 16,22 ****
  			<arguments>
  				<dictionary>
  					<key>LaunchConfigHandle</key>
! 					<value>&lt;project&gt;/.externalToolBuilders/New_Builder.launch</value>
  				</dictionary>
  			</arguments>
  		</buildCommand>
--- 16,22 ----
  			<arguments>
  				<dictionary>
  					<key>LaunchConfigHandle</key>
! 					<value>&lt;project&gt;/.externalToolBuilders/Ant_Builder.launch</value>
  				</dictionary>
  			</arguments>
  		</buildCommand>
***************
*** 33,56 ****
  	</buildSpec>
  	<natures>
  		<nature>org.eclipse.jdt.core.javanature</nature>
- 		<nature>com.google.gdt.eclipse.core.webAppNature</nature>
  		<nature>com.google.gwt.eclipse.core.gwtNature</nature>
  	</natures>
  	<linkedResources>
  		<link>
  			<name>common</name>
  			<type>2</type>
! 			<location>/Users/sandeepgiri/projects/tbitsroot/gwtplugins/common</location>
! 		</link>
! 		<link>
! 			<name>java</name>
! 			<type>2</type>
! 			<location>/home/karan/workspace/trunk/src/java</location>
! 		</link>
! 		<link>
! 			<name>ksk</name>
! 			<type>2</type>
! 			<location>/home/sourabh/projects/gwtplugins/ksk</location>
  		</link>
  	</linkedResources>
  </projectDescription>
--- 33,45 ----
  	</buildSpec>
  	<natures>
  		<nature>org.eclipse.jdt.core.javanature</nature>
  		<nature>com.google.gwt.eclipse.core.gwtNature</nature>
  	</natures>
  	<linkedResources>
  		<link>
  			<name>common</name>
  			<type>2</type>
! 			<location>/home/nitiraj/work/tbitsroot/gwtplugins/common</location>
  		</link>
  	</linkedResources>
  </projectDescription>
Index: jaguar/src/java/com/tbitsGlobal/admin/plugins.gwt.xml
===================================================================
*** jaguar/src/java/com/tbitsGlobal/admin/plugins.gwt.xml	(revision 7192)
--- jaguar/src/java/com/tbitsGlobal/admin/plugins.gwt.xml	(working copy)
***************
*** 1 ****
! <module><inherits name="transmittal.com.tbitsGlobal.Trnadmin"/><inherits name="corrGeneric.com.tbitsGlobal.Corradmin"/></module>
\ No newline at end of file
--- 1 ----
! <module><inherits name="corrGeneric.com.tbitsGlobal.Corradmin"/></module>
\ No newline at end of file
Index: jaguar/src/java/com/tbitsGlobal/jaguar/plugins.gwt.xml
===================================================================
*** jaguar/src/java/com/tbitsGlobal/jaguar/plugins.gwt.xml	(revision 7192)
--- jaguar/src/java/com/tbitsGlobal/jaguar/plugins.gwt.xml	(working copy)
***************
*** 1 ****
! <module><inherits name="transmittal.com.tbitsGlobal.transmittaltbits"/><inherits name="corrGeneric.com.tbitsGlobal.Corrtbits"/><inherits name="pdf.com.tbitsGlobal.pdftbits"/><inherits name="mom.com.tbitsGlobal.MOMtbits"/></module>
\ No newline at end of file
--- 1 ----
! <module><inherits name="corrGeneric.com.tbitsGlobal.Corrtbits"/></module>
\ No newline at end of file
Index: jaguar/.settings/com.google.gwt.eclipse.core.prefs
===================================================================
*** jaguar/.settings/com.google.gwt.eclipse.core.prefs	(revision 7192)
--- jaguar/.settings/com.google.gwt.eclipse.core.prefs	(working copy)
***************
*** 1,4 ****
! #Wed Apr 20 20:18:58 GMT+05:30 2011
  eclipse.preferences.version=1
  entryPointModules=com.tbitsGlobal.jaguar.Jaguar|commons.com.tbitsGlobal.utils.Utils|com.tbitsGlobal.jaguar.plugins
! filesCopiedToWebInfLib=
--- 1,4 ----
! #Thu Mar 01 12:34:02 IST 2012
  eclipse.preferences.version=1
  entryPointModules=com.tbitsGlobal.jaguar.Jaguar|commons.com.tbitsGlobal.utils.Utils|com.tbitsGlobal.jaguar.plugins
! filesCopiedToWebInfLib=gwt-servlet.jar
