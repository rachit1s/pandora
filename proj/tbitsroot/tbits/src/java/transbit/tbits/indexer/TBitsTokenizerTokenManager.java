/*
 * Copyright (c) 2005 Transbit Technologies Pvt. Ltd. All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of Transbit Technologies Pvt. Ltd. ("Confidential Information").  You
 * shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement
 * you entered into with Transbit Technologies Pvt. Ltd.
 */



/* Generated By:JavaCC: Do not edit this line. TBitsTokenizerTokenManager.java */

/**
 * TBitsTokenizer.java
 *
 * $Header:
 */
package transbit.tbits.indexer;

public class TBitsTokenizerTokenManager implements TBitsTokenizerConstants {
    static final long[] jjbitVec0    = { 0xfffffffeL, 0x0L, 0x0L, 0x0L };
    static final long[] jjbitVec2    = { 0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL };
    static final long[] jjbitVec3    = { 0x1ff0000000000000L, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L };
    static final long[] jjbitVec4    = { 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL };
    static final long[] jjbitVec5    = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L };
    static final long[] jjbitVec6    = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L };
    static final long[] jjbitVec7    = { 0x3fffffffffffL, 0x0L, 0x0L, 0x0L };
    static final long[] jjbitVec8    = { 0x1600L, 0x0L, 0x0L, 0x0L };
    static final long[] jjbitVec9    = { 0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L };
    static final long[] jjbitVec14   = { 0x0L, 0x3ffL, 0x0L, 0x0L };
    static final long[] jjbitVec13   = { 0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L };
    static final long[] jjbitVec12   = { 0x0L, 0xffc000000000L, 0x0L, 0x0L };
    static final long[] jjbitVec11   = { 0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L };
    static final long[] jjbitVec10   = { 0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L };
    static final int[]  jjnextStates = {
        27, 28, 29, 31, 35, 36, 38, 41, 42, 0, 43, 44, 48, 49, 50, 51, 57, 58, 59, 60, 70, 71, 7, 8, 10, 11, 17, 18, 28, 29, 31, 29, 30, 31, 73, 74, 76, 77, 80, 81, 1, 2, 7, 8, 17, 18, 23, 24, 54, 55,
        78, 79, 12, 13, 14, 15, 21, 22, 45, 46, 52, 53, 61, 62, 65, 66, 67, 68,
    };
    public static final String[] jjstrLiteralImages = {
        "", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
    };
    public static final String[] lexStateNames      = { "DEFAULT", };
    static final long[]          jjtoToken          = { 0x87ffL, };
    static final long[]          jjtoSkip           = { 0x20000L, };

    //~--- fields -------------------------------------------------------------

    public java.io.PrintStream debugStream     = System.out;
    private final int[]        jjrounds        = new int[83];
    private final int[]        jjstateSet      = new int[166];
    int                        defaultLexState = 0;
    int                        curLexState     = 0;
    protected char             curChar;
    protected CharStream       input_stream;
    int                        jjmatchedKind;
    int                        jjmatchedPos;
    int                        jjnewStateCnt;
    int                        jjround;

    //~--- constructors -------------------------------------------------------

    public TBitsTokenizerTokenManager(CharStream stream) {
        input_stream = stream;
    }

    public TBitsTokenizerTokenManager(CharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    //~--- methods ------------------------------------------------------------

    public void ReInit(CharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState  = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    public void ReInit(CharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    private final void ReInitRounds() {
        int i;

        jjround = 0x80000001;

        for (i = 83; i-- > 0; ) {
            jjrounds[i] = 0x80000000;
        }
    }

    public void SwitchTo(int lexState) {
        if ((lexState >= 1) || (lexState < 0)) {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        } else {
            curLexState = lexState;
        }
    }

    private final void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
        case 0 :
            return ((jjbitVec2[i2] & l2) != 0L);

        default :
            if ((jjbitVec0[i1] & l1) != 0L) {
                return true;
            }

            return false;
        }
    }

    private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
        case 48 :
            return ((jjbitVec4[i2] & l2) != 0L);

        case 49 :
            return ((jjbitVec5[i2] & l2) != 0L);

        case 51 :
            return ((jjbitVec6[i2] & l2) != 0L);

        case 61 :
            return ((jjbitVec7[i2] & l2) != 0L);

        default :
            if ((jjbitVec3[i1] & l1) != 0L) {
                return true;
            }

            return false;
        }
    }

    private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
        case 6 :
            return ((jjbitVec10[i2] & l2) != 0L);

        case 11 :
            return ((jjbitVec11[i2] & l2) != 0L);

        case 13 :
            return ((jjbitVec12[i2] & l2) != 0L);

        case 14 :
            return ((jjbitVec13[i2] & l2) != 0L);

        case 16 :
            return ((jjbitVec14[i2] & l2) != 0L);

        default :
            if ((jjbitVec8[i1] & l1) != 0L) {
                if ((jjbitVec9[i2] & l2) == 0L) {
                    return false;
                } else {
                    return true;
                }
            }

            return false;
        }
    }

    private final void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state]             = jjround;
        }
    }

    private final void jjCheckNAddStates(int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
    }

    private final void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    private final void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    protected Token jjFillToken() {
        Token t = Token.newToken(jjmatchedKind);

        t.kind = jjmatchedKind;

        String im = jjstrLiteralImages[jjmatchedKind];

        t.image       = (im == null)
                        ? input_stream.GetImage()
                        : im;
        t.beginLine   = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine     = input_stream.getEndLine();
        t.endColumn   = input_stream.getEndColumn();

        return t;
    }

    private final int jjMoveNfa_0(int startState, int curPos) {
        int[] nextStates;
        int   startsAt = 0;

        jjnewStateCnt = 83;

        int i = 1;

        jjstateSet[0] = startState;

        int j,
            kind = 0x7fffffff;

        for (;;) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }

            if (curChar < 64) {
                long l = 1L << curChar;

MatchLoop:
                do {
                    switch (jjstateSet[--i]) {
                    case 5 :
                        if ((0x3ff600800000000L & l) != 0L) {
                            if (kind > 9) {
                                kind = 9;
                            }

                            jjCheckNAdd(4);
                        }

                        if ((0x3ff000000000000L & l) != 0L) {
                            if (kind > 1) {
                                kind = 1;
                            }

                            jjCheckNAddStates(0, 21);
                        } else if (curChar == 35) {
                            jjCheckNAdd(1);
                        }

                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddStates(22, 27);
                        }

                        break;

                    case 0 :
                        if (curChar == 35) {
                            jjCheckNAdd(1);
                        }

                        break;

                    case 1 :
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }

                        if (kind > 8) {
                            kind = 8;
                        }

                        jjCheckNAddTwoStates(1, 2);

                        break;

                    case 2 :
                        if (curChar == 35) {
                            jjCheckNAdd(3);
                        }

                        break;

                    case 3 :
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }

                        if (kind > 8) {
                            kind = 8;
                        }

                        jjCheckNAdd(3);

                        break;

                    case 4 :
                        if ((0x3ff600800000000L & l) == 0L) {
                            break;
                        }

                        if (kind > 9) {
                            kind = 9;
                        }

                        jjCheckNAdd(4);

                        break;

                    case 6 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddStates(22, 27);
                        }

                        break;

                    case 7 :
                    case 49 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(7, 8);
                        }

                        break;

                    case 8 :
                        if ((0xf00000000000L & l) != 0L) {
                            jjCheckNAdd(9);
                        }

                        break;

                    case 9 :
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAdd(9);

                        break;

                    case 10 :
                    case 58 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(10, 11);
                        }

                        break;

                    case 11 :
                        if ((0xf00000000000L & l) != 0L) {
                            jjCheckNAdd(12);
                        }

                        break;

                    case 12 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(12, 13);
                        }

                        break;

                    case 13 :
                        if ((0xf00000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(14, 15);
                        }

                        break;

                    case 14 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(14, 15);
                        }

                        break;

                    case 15 :
                    case 16 :
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAddTwoStates(11, 16);

                        break;

                    case 17 :
                    case 71 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(17, 18);
                        }

                        break;

                    case 18 :
                        if ((0xf00000000000L & l) != 0L) {
                            jjCheckNAdd(19);
                        }

                        break;

                    case 19 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(19, 20);
                        }

                        break;

                    case 20 :
                        if ((0xf00000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(21, 22);
                        }

                        break;

                    case 21 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(21, 22);
                        }

                        break;

                    case 22 :
                    case 23 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(23, 24);
                        }

                        break;

                    case 24 :
                        if ((0xf00000000000L & l) != 0L) {
                            jjCheckNAdd(25);
                        }

                        break;

                    case 25 :
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAddTwoStates(20, 25);

                        break;

                    case 26 :
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }

                        if (kind > 1) {
                            kind = 1;
                        }

                        jjCheckNAddStates(0, 21);

                        break;

                    case 27 :
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }

                        if (kind > 1) {
                            kind = 1;
                        }

                        jjCheckNAdd(27);

                        break;

                    case 28 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddStates(28, 30);
                        }

                        break;

                    case 29 :
                        if ((0x600000000000L & l) != 0L) {
                            jjCheckNAdd(30);
                        }

                        break;

                    case 30 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddStates(31, 33);
                        }

                        break;

                    case 32 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(32, 33);
                        }

                        break;

                    case 33 :
                        if ((0x600000000000L & l) != 0L) {
                            jjCheckNAdd(34);
                        }

                        break;

                    case 34 :
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }

                        if (kind > 5) {
                            kind = 5;
                        }

                        jjCheckNAddTwoStates(33, 34);

                        break;

                    case 35 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(35, 36);
                        }

                        break;

                    case 36 :
                        if (curChar == 46) {
                            jjCheckNAdd(37);
                        }

                        break;

                    case 37 :
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }

                        if (kind > 6) {
                            kind = 6;
                        }

                        jjCheckNAddTwoStates(36, 37);

                        break;

                    case 38 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(38, 41);
                        }

                        break;

                    case 39 :
                        if (curChar == 58) {
                            jjCheckNAdd(40);
                        }

                        break;

                    case 40 :
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }

                        if (kind > 7) {
                            kind = 7;
                        }

                        jjCheckNAddTwoStates(41, 40);

                        break;

                    case 41 :
                        if (curChar == 58) {
                            jjstateSet[jjnewStateCnt++] = 39;
                        }

                        break;

                    case 42 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(42, 0);
                        }

                        break;

                    case 43 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(43, 44);
                        }

                        break;

                    case 44 :
                        if ((0xf00000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(45, 46);
                        }

                        break;

                    case 45 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(45, 46);
                        }

                        break;

                    case 46 :
                    case 47 :
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAdd(47);

                        break;

                    case 48 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(48, 49);
                        }

                        break;

                    case 50 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(50, 51);
                        }

                        break;

                    case 51 :
                        if ((0xf00000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(52, 53);
                        }

                        break;

                    case 52 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(52, 53);
                        }

                        break;

                    case 53 :
                    case 54 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(54, 55);
                        }

                        break;

                    case 55 :
                        if ((0xf00000000000L & l) != 0L) {
                            jjCheckNAdd(56);
                        }

                        break;

                    case 56 :
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAddTwoStates(51, 56);

                        break;

                    case 57 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(57, 58);
                        }

                        break;

                    case 59 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(59, 60);
                        }

                        break;

                    case 60 :
                        if ((0xf00000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(61, 62);
                        }

                        break;

                    case 61 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(61, 62);
                        }

                        break;

                    case 62 :
                    case 63 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(63, 64);
                        }

                        break;

                    case 64 :
                        if ((0xf00000000000L & l) != 0L) {
                            jjCheckNAdd(65);
                        }

                        break;

                    case 65 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(65, 66);
                        }

                        break;

                    case 66 :
                        if ((0xf00000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(67, 68);
                        }

                        break;

                    case 67 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(67, 68);
                        }

                        break;

                    case 68 :
                    case 69 :
                        if ((0x3ff000000000000L & l) == 0L) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAddTwoStates(64, 69);

                        break;

                    case 70 :
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(70, 71);
                        }

                        break;

                    case 74 :
                        if (curChar == 39) {
                            jjstateSet[jjnewStateCnt++] = 75;
                        }

                        break;

                    case 77 :
                        if (curChar == 46) {
                            jjCheckNAdd(78);
                        }

                        break;

                    case 79 :
                        if (curChar != 46) {
                            break;
                        }

                        if (kind > 3) {
                            kind = 3;
                        }

                        jjCheckNAdd(78);

                        break;

                    case 81 :
                        if (curChar == 38) {
                            jjstateSet[jjnewStateCnt++] = 82;
                        }

                        break;

                    default :
                        break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);

MatchLoop:
                do {
                    switch (jjstateSet[--i]) {
                    case 5 :
                        if ((0x47fffffe87fffffeL & l) != 0L) {
                            if (kind > 9) {
                                kind = 9;
                            }

                            jjCheckNAdd(4);
                        }

                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddStates(34, 39);
                        }

                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            if (kind > 1) {
                                kind = 1;
                            }

                            jjCheckNAddStates(0, 21);
                        }

                        break;

                    case 1 :
                        if ((0x7fffffe07fffffeL & l) == 0L) {
                            break;
                        }

                        if (kind > 8) {
                            kind = 8;
                        }

                        jjAddStates(40, 41);

                        break;

                    case 3 :
                        if ((0x7fffffe07fffffeL & l) == 0L) {
                            break;
                        }

                        if (kind > 8) {
                            kind = 8;
                        }

                        jjstateSet[jjnewStateCnt++] = 3;

                        break;

                    case 4 :
                        if ((0x47fffffe87fffffeL & l) == 0L) {
                            break;
                        }

                        if (kind > 9) {
                            kind = 9;
                        }

                        jjCheckNAdd(4);

                        break;

                    case 7 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjAddStates(42, 43);
                        }

                        break;

                    case 8 :
                        if (curChar == 95) {
                            jjCheckNAdd(9);
                        }

                        break;

                    case 9 :
                        if ((0x7fffffe07fffffeL & l) == 0L) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAdd(9);

                        break;

                    case 10 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(10, 11);
                        }

                        break;

                    case 11 :
                        if (curChar == 95) {
                            jjCheckNAdd(12);
                        }

                        break;

                    case 12 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(12, 13);
                        }

                        break;

                    case 13 :
                        if (curChar == 95) {
                            jjCheckNAddTwoStates(14, 15);
                        }

                        break;

                    case 14 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(14, 15);
                        }

                        break;

                    case 16 :
                        if ((0x7fffffe07fffffeL & l) == 0L) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAddTwoStates(11, 16);

                        break;

                    case 17 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjAddStates(44, 45);
                        }

                        break;

                    case 18 :
                        if (curChar == 95) {
                            jjCheckNAdd(19);
                        }

                        break;

                    case 19 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(19, 20);
                        }

                        break;

                    case 20 :
                        if (curChar == 95) {
                            jjCheckNAddTwoStates(21, 22);
                        }

                        break;

                    case 21 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(21, 22);
                        }

                        break;

                    case 23 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjAddStates(46, 47);
                        }

                        break;

                    case 24 :
                        if (curChar == 95) {
                            jjCheckNAdd(25);
                        }

                        break;

                    case 25 :
                        if ((0x7fffffe07fffffeL & l) == 0L) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAddTwoStates(20, 25);

                        break;

                    case 26 :
                        if ((0x7fffffe07fffffeL & l) == 0L) {
                            break;
                        }

                        if (kind > 1) {
                            kind = 1;
                        }

                        jjCheckNAddStates(0, 21);

                        break;

                    case 27 :
                        if ((0x7fffffe07fffffeL & l) == 0L) {
                            break;
                        }

                        if (kind > 1) {
                            kind = 1;
                        }

                        jjCheckNAdd(27);

                        break;

                    case 28 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddStates(28, 30);
                        }

                        break;

                    case 29 :
                        if (curChar == 95) {
                            jjCheckNAdd(30);
                        }

                        break;

                    case 30 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddStates(31, 33);
                        }

                        break;

                    case 31 :
                        if (curChar == 64) {
                            jjCheckNAdd(32);
                        }

                        break;

                    case 32 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(32, 33);
                        }

                        break;

                    case 34 :
                        if ((0x7fffffe07fffffeL & l) == 0L) {
                            break;
                        }

                        if (kind > 5) {
                            kind = 5;
                        }

                        jjCheckNAddTwoStates(33, 34);

                        break;

                    case 35 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(35, 36);
                        }

                        break;

                    case 37 :
                        if ((0x7fffffe07fffffeL & l) == 0L) {
                            break;
                        }

                        if (kind > 6) {
                            kind = 6;
                        }

                        jjCheckNAddTwoStates(36, 37);

                        break;

                    case 38 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(38, 41);
                        }

                        break;

                    case 40 :
                        if ((0x7fffffe87fffffeL & l) == 0L) {
                            break;
                        }

                        if (kind > 7) {
                            kind = 7;
                        }

                        jjCheckNAddTwoStates(41, 40);

                        break;

                    case 42 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(42, 0);
                        }

                        break;

                    case 43 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(43, 44);
                        }

                        break;

                    case 44 :
                        if (curChar == 95) {
                            jjCheckNAddTwoStates(45, 46);
                        }

                        break;

                    case 45 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(45, 46);
                        }

                        break;

                    case 47 :
                        if ((0x7fffffe07fffffeL & l) == 0L) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjstateSet[jjnewStateCnt++] = 47;

                        break;

                    case 48 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(48, 49);
                        }

                        break;

                    case 50 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(50, 51);
                        }

                        break;

                    case 51 :
                        if (curChar == 95) {
                            jjCheckNAddTwoStates(52, 53);
                        }

                        break;

                    case 52 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(52, 53);
                        }

                        break;

                    case 54 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjAddStates(48, 49);
                        }

                        break;

                    case 55 :
                        if (curChar == 95) {
                            jjCheckNAdd(56);
                        }

                        break;

                    case 56 :
                        if ((0x7fffffe07fffffeL & l) == 0L) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAddTwoStates(51, 56);

                        break;

                    case 57 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(57, 58);
                        }

                        break;

                    case 59 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(59, 60);
                        }

                        break;

                    case 60 :
                        if (curChar == 95) {
                            jjCheckNAddTwoStates(61, 62);
                        }

                        break;

                    case 61 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(61, 62);
                        }

                        break;

                    case 63 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(63, 64);
                        }

                        break;

                    case 64 :
                        if (curChar == 95) {
                            jjCheckNAdd(65);
                        }

                        break;

                    case 65 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(65, 66);
                        }

                        break;

                    case 66 :
                        if (curChar == 95) {
                            jjCheckNAddTwoStates(67, 68);
                        }

                        break;

                    case 67 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(67, 68);
                        }

                        break;

                    case 69 :
                        if ((0x7fffffe07fffffeL & l) == 0L) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAddTwoStates(64, 69);

                        break;

                    case 70 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(70, 71);
                        }

                        break;

                    case 72 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddStates(34, 39);
                        }

                        break;

                    case 73 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(73, 74);
                        }

                        break;

                    case 75 :
                        if ((0x7fffffe07fffffeL & l) == 0L) {
                            break;
                        }

                        if (kind > 2) {
                            kind = 2;
                        }

                        jjCheckNAddTwoStates(74, 75);

                        break;

                    case 76 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(76, 77);
                        }

                        break;

                    case 78 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjAddStates(50, 51);
                        }

                        break;

                    case 80 :
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(80, 81);
                        }

                        break;

                    case 81 :
                        if (curChar == 64) {
                            jjCheckNAdd(82);
                        }

                        break;

                    case 82 :
                        if ((0x7fffffe07fffffeL & l) == 0L) {
                            break;
                        }

                        if (kind > 4) {
                            kind = 4;
                        }

                        jjCheckNAdd(82);

                        break;

                    default :
                        break;
                    }
                } while (i != startsAt);
            } else {
                int  hiByte = (int) (curChar >> 8);
                int  i1     = hiByte >> 6;
                long l1     = 1L << (hiByte & 077);
                int  i2     = (curChar & 0xff) >> 6;
                long l2     = 1L << (curChar & 077);

MatchLoop:
                do {
                    switch (jjstateSet[--i]) {
                    case 5 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            if (kind > 9) {
                                kind = 9;
                            }

                            jjCheckNAdd(4);
                        }

                        if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                            if (kind > 15) {
                                kind = 15;
                            }
                        }

                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddStates(22, 27);
                        }

                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            if (kind > 1) {
                                kind = 1;
                            }

                            jjCheckNAddStates(0, 21);
                        }

                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddStates(34, 39);
                        }

                        break;

                    case 1 :
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 8) {
                            kind = 8;
                        }

                        jjAddStates(40, 41);

                        break;

                    case 3 :
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 8) {
                            kind = 8;
                        }

                        jjstateSet[jjnewStateCnt++] = 3;

                        break;

                    case 4 :
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 9) {
                            kind = 9;
                        }

                        jjCheckNAdd(4);

                        break;

                    case 6 :
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddStates(22, 27);
                        }

                        break;

                    case 7 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(7, 8);
                        }

                        break;

                    case 9 :
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjstateSet[jjnewStateCnt++] = 9;

                        break;

                    case 10 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(10, 11);
                        }

                        break;

                    case 12 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(52, 53);
                        }

                        break;

                    case 14 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(54, 55);
                        }

                        break;

                    case 15 :
                        if (!jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAddTwoStates(11, 16);

                        break;

                    case 16 :
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAddTwoStates(11, 16);

                        break;

                    case 17 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(17, 18);
                        }

                        break;

                    case 19 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(19, 20);
                        }

                        break;

                    case 21 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(56, 57);
                        }

                        break;

                    case 22 :
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(23, 24);
                        }

                        break;

                    case 23 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(23, 24);
                        }

                        break;

                    case 25 :
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAddTwoStates(20, 25);

                        break;

                    case 26 :
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 1) {
                            kind = 1;
                        }

                        jjCheckNAddStates(0, 21);

                        break;

                    case 27 :
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 1) {
                            kind = 1;
                        }

                        jjCheckNAdd(27);

                        break;

                    case 28 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddStates(28, 30);
                        }

                        break;

                    case 30 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddStates(31, 33);
                        }

                        break;

                    case 32 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(32, 33);
                        }

                        break;

                    case 34 :
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 5) {
                            kind = 5;
                        }

                        jjCheckNAddTwoStates(33, 34);

                        break;

                    case 35 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(35, 36);
                        }

                        break;

                    case 37 :
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 6) {
                            kind = 6;
                        }

                        jjCheckNAddTwoStates(36, 37);

                        break;

                    case 38 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(38, 41);
                        }

                        break;

                    case 40 :
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 7) {
                            kind = 7;
                        }

                        jjCheckNAddTwoStates(41, 40);

                        break;

                    case 42 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(42, 0);
                        }

                        break;

                    case 43 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(43, 44);
                        }

                        break;

                    case 45 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(58, 59);
                        }

                        break;

                    case 46 :
                        if (!jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAdd(47);

                        break;

                    case 47 :
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAdd(47);

                        break;

                    case 48 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(48, 49);
                        }

                        break;

                    case 49 :
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(7, 8);
                        }

                        break;

                    case 50 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(50, 51);
                        }

                        break;

                    case 52 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(60, 61);
                        }

                        break;

                    case 53 :
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(54, 55);
                        }

                        break;

                    case 54 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(54, 55);
                        }

                        break;

                    case 56 :
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAddTwoStates(51, 56);

                        break;

                    case 57 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(57, 58);
                        }

                        break;

                    case 58 :
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(10, 11);
                        }

                        break;

                    case 59 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(59, 60);
                        }

                        break;

                    case 61 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(62, 63);
                        }

                        break;

                    case 62 :
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(63, 64);
                        }

                        break;

                    case 63 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(63, 64);
                        }

                        break;

                    case 65 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(64, 65);
                        }

                        break;

                    case 67 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(66, 67);
                        }

                        break;

                    case 68 :
                        if (!jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAddTwoStates(64, 69);

                        break;

                    case 69 :
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 10) {
                            kind = 10;
                        }

                        jjCheckNAddTwoStates(64, 69);

                        break;

                    case 70 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(70, 71);
                        }

                        break;

                    case 71 :
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(17, 18);
                        }

                        break;

                    case 72 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddStates(34, 39);
                        }

                        break;

                    case 73 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(73, 74);
                        }

                        break;

                    case 75 :
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 2) {
                            kind = 2;
                        }

                        jjCheckNAddTwoStates(74, 75);

                        break;

                    case 76 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(76, 77);
                        }

                        break;

                    case 78 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(50, 51);
                        }

                        break;

                    case 80 :
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(80, 81);
                        }

                        break;

                    case 82 :
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            break;
                        }

                        if (kind > 4) {
                            kind = 4;
                        }

                        jjstateSet[jjnewStateCnt++] = 82;

                        break;

                    default :
                        break;
                    }
                } while (i != startsAt);
            }

            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos  = curPos;
                kind          = 0x7fffffff;
            }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 83 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }

            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjMoveStringLiteralDfa0_0() {
        return jjMoveNfa_0(5, 0);
    }

    //~--- get methods --------------------------------------------------------

    public Token getNextToken() {
        int   kind;
        Token specialToken = null;
        Token matchedToken;
        int   curPos = 0;

EOFLoop:
        for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken  = jjFillToken();

                return matchedToken;
            }

            jjmatchedKind = 0x7fffffff;
            jjmatchedPos  = 0;
            curPos        = jjMoveStringLiteralDfa0_0();

            if ((jjmatchedPos == 0) && (jjmatchedKind > 17)) {
                jjmatchedKind = 17;
            }

            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos) {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                }

                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();

                    return matchedToken;
                } else {
                    continue EOFLoop;
                }
            }

            int     error_line   = input_stream.getEndLine();
            int     error_column = input_stream.getEndColumn();
            String  error_after  = null;
            boolean EOFSeen      = false;

            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen     = true;
                error_after = (curPos <= 1)
                              ? ""
                              : input_stream.GetImage();

                if ((curChar == '\n') || (curChar == '\r')) {
                    error_line++;
                    error_column = 0;
                } else {
                    error_column++;
                }
            }

            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = (curPos <= 1)
                              ? ""
                              : input_stream.GetImage();
            }

            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    //~--- set methods --------------------------------------------------------

    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }
}
